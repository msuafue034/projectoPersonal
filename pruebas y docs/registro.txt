MIXIN --> Para vistas basadas en clases.
    from django.contrib.auth.mixins import LoginRequiredMixin

    class NombreClase(LoginRequiredMixin, CreateView):
        variable = valor
        form = formulario

    Otros tipos:
        LoginRequiredMixin: Verifica si se está logeado. No verifica el tipo de user.
        PermissionRequiredMixin: Verifica que el usuario tenga un permiso específico.
        UserPassesTestMixin: Definir una condición personalizada y si la pasa, da acceso.



DECORATORS --> Para vistas basadas en funciones
    from django.contrib.auth.decorators import login_required 

    @login_required
    def funcion{
        variable = valor
    }

    Otros tipos:
        permision_required
        user_passed_test



USUARIOS PERSONALIZADOS: 

    AbstractUser --> Atributos y funcionalidades disponibles desde el modelo (recoge los datos del modelo)
        from django.contrib.auth.models import AbstractUser

        class CustomUser(AbstractUser):
            campos adicionales como número de teléfono, fechas, imagen... (=! name, password, mail)

        def __str__():
            return self.username (hereda)

        * Hay que modificar settings: AUTH_USER_MODEL = 'cursosapp.estudiante'
        * NO es aconsejable que vaias clases hereden de AbstractUser. Es mejor crear usuario por ejemplo en vez de estudiante y profesor

    UserAdmin: 
        class CustomUserAdmin(UserAdmin):
            model = Estudiante
            fieldset = UserAdmin.fieldset + (
                (None, {'fields': ('foto', 'fecha_nacimiento')}),
            )



def get_queryset(self):
    queryset = super().get_queryset()
    name_search = self.request.GET.get('name_search')
    estudiante = self.request.GET.get('name_search')
    queryset = queryset.filter(estudiante_id=self.request.user.id)


_______________________________________________________
*******************************************************

**Función Q para get_queryset
**Parámetro ?next= en el navegador
**form_valid
**get_context_data
**get_queryset



************* LOGIN (base) **************

EJ LOGIN:

{% block login %}
        {% if user.is_authenticated %}
            <p>¡Bienvenido de nuevo, {{ user.username }}!</p>
            <form action="{% url 'logout' %}" method="post">
                {% csrf_token %} 
                <button type="submit" class="">Cerrar Sesión</button>
            </form>
        {% else %}
            <p>Por favor, <a href="{% url 'login' %}">inicia sesión</a> para acceder a más funciones.</p>
        {% endif %}
    {% endblock %}


EJ VIEWS:

class EditarJugador(LoginRequiredMixin, DetailView):
    model = Jugador
    template_name = 'dorsales_app/jugador_crud.html'
    form_class = JugadorForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(*kwargs*)
        context['action'] = 'update'
        return context

    def get_success_url(self):
        return reverse_lazy('jugador_detalle', kwargs={'pk': self.object.pk})


************* GESTIÓN DE CREDENCIALES **************

Database sin utilizar la gestión de credenciales:
DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',     # Motor para mysql-connector-python
        'NAME': '2DAW_MNSF_BD',                 # Nombre de la base de datos
        'USER': 'msuafue034',                   # Usuario de la base de datos
        'PASSWORD': 'msuafue034!',              # Contraseña del usuario
        'HOST': '192.168.100.5',                # Dirección del servidor
        'PORT': '3306',                         # Puerto de la base de datos
        'OPTIONS': {
            'autocommit': True,
        },
    }
}

# Database base, una vez recoja los datos de decouple-config sería algo así (los campos sin cubrir se completan con los que recive del .env):
# DATABASES = {
#     'default': {
#         'ENGINE': 'mysql.connector.django',  # O 'django.db.backends.mysql' si usas mysqlclient
#         'NAME': config('2DAW_MNSF_BD'),
#         'USER': config('msuafue034'),
#         'PASSWORD': config('msuafue034!'),
#         'HOST': config('192.168.100.5', default='localhost'),
#         'PORT': config('3306', default='3306'),
#     }
# }

************* DESPLIEGUE **************

Pasos 1a y 1b hechos en el entorno donde se va a desplegar (no necesarios EN ESTE CASO)
2b: Dentro de /var/www/ crear una carpeta con el nombre de nuestro proyecto, coger el repositorio y clonar
    cd /var/www/
    python3 -m env venv
    source venv/bin/activate
    git clone del proyecto
    pip install requirements.txt
    deactivate

Apache: configuración guardada en etc, sites-available es literal
    - Crear archivo con mis iniciales.conf (MNSF.conf)
    - Añadir todo el contenido gitHub 
        - (donde pone proyecto1 cambiar por el nombre del proyecto que está en var/www/x)
        - (donde pone venv cambiar por env)

3b(linea 3 de código ya configurada, no necesario EN ESTE CASO)



################## HACER: ##################

[done] BBDD --> MariaDB (pip install mysql-connector-python)
[done] - Quitar credenciales de production.py y utilizar variables de entorno (p. ej)

[falta probar] - Elegir gestión de credenciales e implementarla

[X] - Desplegar proyecto con gitHub + info registro.txt

[no prioritario] - Registro --> Ajustar divs más pequeños sin que se desborde el contenido